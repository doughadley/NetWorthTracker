import React, { useState, useEffect } from 'react';
import { Account, Institution, StockHolding, CDHolding } from '../types';
import { generateId } from '../utils/idGenerator';
import { formatCurrencyWhole } from '../utils/formatters';

interface AccountFormProps {
  institutions: Institution[];
  onSubmit: (account: Account) => void;
  onCancel: () => void;
  initialData?: Account | null;
}

const AccountForm: React.FC<AccountFormProps> = ({ institutions, onSubmit, onCancel, initialData }) => {
  const [institutionId, setInstitutionId] = useState<string>('');
  const [name, setName] = useState('');
  const [balance, setBalance] = useState<number>(0);
  const [stockHoldings, setStockHoldings] = useState<StockHolding[]>([]);
  const [cdHoldings, setCdHoldings] = useState<CDHolding[]>([]);
  
  // Stock input state
  const [currentSymbol, setCurrentSymbol] = useState('');
  const [currentShares, setCurrentShares] = useState('');
  const [currentPurchasePrice, setCurrentPurchasePrice] = useState('');

  // CD input state
  const [currentPrincipal, setCurrentPrincipal] = useState('');
  const [currentRate, setCurrentRate] = useState('');
  const [currentMaturity, setCurrentMaturity] = useState('');

  const financialInstitutions = institutions.filter(inst => inst.type === 'financial');

  useEffect(() => {
    if (initialData) {
      setInstitutionId(initialData.institutionId);
      setName(initialData.name);
      setBalance(initialData.balance);
      setStockHoldings(initialData.stockHoldings || []);
      setCdHoldings(initialData.cdHoldings || []);
    } else {
      // Reset to default for new account
      setInstitutionId(financialInstitutions.length > 0 ? financialInstitutions[0].id : '');
      setName('');
      setBalance(0);
      setStockHoldings([]);
      setCdHoldings([]);
    }
  }, [initialData, institutions]);

  const handleAddStock = () => {
    if (!currentSymbol.trim() || !currentShares.trim() || !currentPurchasePrice.trim()) {
      alert('Please fill in symbol, shares, and purchase price for the stock holding.');
      return;
    }
    const sharesNum = parseFloat(currentShares);
    const purchasePriceNum = parseFloat(currentPurchasePrice);

    if (isNaN(sharesNum) || sharesNum <= 0 || isNaN(purchasePriceNum) || purchasePriceNum < 0) {
      alert('Please enter valid numbers for shares and purchase price.');
      return;
    }

    setStockHoldings([...stockHoldings, { 
      id: generateId(), 
      symbol: currentSymbol.toUpperCase(), 
      shares: sharesNum, 
      purchasePrice: purchasePriceNum,
      currentPrice: purchasePriceNum, // Initialize currentPrice to purchasePrice
    }]);
    setCurrentSymbol('');
    setCurrentShares('');
    setCurrentPurchasePrice('');
  };

  const handleRemoveStock = (id: string) => {
    setStockHoldings(stockHoldings.filter(h => h.id !== id));
  };
  
  const handleAddCD = () => {
    if (!currentPrincipal.trim() || !currentRate.trim() || !currentMaturity.trim()) {
        alert('Please fill in principal, interest rate, and maturity date for the CD.');
        return;
    }
    const principalNum = parseFloat(currentPrincipal);
    const rateNum = parseFloat(currentRate);

    if (isNaN(principalNum) || principalNum <= 0 || isNaN(rateNum) || rateNum <= 0) {
        alert('Please enter valid positive numbers for principal and interest rate.');
        return;
    }
    setCdHoldings([...cdHoldings, {
        id: generateId(),
        principal: principalNum,
        interestRate: rateNum,
        openDate: new Date().toISOString().split('T')[0], // Today's date
        maturityDate: currentMaturity,
    }]);
    setCurrentPrincipal('');
    setCurrentRate('');
    setCurrentMaturity('');
  };

  const handleRemoveCD = (id: string) => {
    setCdHoldings(cdHoldings.filter(cd => cd.id !== id));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!institutionId) {
      alert('Please select an institution.');
      return;
    }
    if (!name.trim()) {
      alert('Account name cannot be empty.');
      return;
    }

    const accountData: Account = {
      id: initialData?.id || '', // ID will be generated by App.tsx if new
      institutionId,
      name: name.trim(),
      balance,
      stockHoldings,
      cdHoldings,
    };
    onSubmit(accountData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 max-h-[70vh] overflow-y-auto pr-2">
      {/* --- Main Account Details --- */}
      <div className="space-y-4 p-3 border border-slate-200 rounded-md">
        <h4 className="text-md font-medium text-slate-700 border-b pb-2">Account Details</h4>
        <div>
          <label htmlFor="institution" className="block text-sm font-medium text-slate-700">Institution</label>
          <select id="institution" value={institutionId} onChange={(e) => setInstitutionId(e.target.value)} className="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" required>
            <option value="" disabled>Select an institution</option>
            {financialInstitutions.map(inst => <option key={inst.id} value={inst.id}>{inst.name}</option>)}
          </select>
        </div>
        <div>
          <label htmlFor="accountName" className="block text-sm font-medium text-slate-700">Account Name</label>
          <input type="text" id="accountName" value={name} onChange={(e) => setName(e.target.value)} className="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" placeholder="e.g., Everyday Checking" required/>
        </div>
        <div>
            <label htmlFor="balance" className="block text-sm font-medium text-slate-700">Cash Balance</label>
            <input type="number" id="balance" value={balance} onChange={(e) => setBalance(parseFloat(e.target.value) || 0)} className="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" step="0.01"/>
        </div>
      </div>

      {/* --- Stock Holdings --- */}
      <div className="space-y-3 p-3 border border-slate-200 rounded-md">
        <h4 className="text-md font-medium text-slate-700">Stock Holdings</h4>
        {stockHoldings.map((holding) => (
          <div key={holding.id} className="flex items-center justify-between space-x-2 p-2 bg-slate-50 rounded">
            <span className="flex-1 text-sm overflow-hidden text-ellipsis">
              {holding.symbol}: {holding.shares} shares @ {formatCurrencyWhole(holding.purchasePrice)}
            </span>
            <button type="button" onClick={() => handleRemoveStock(holding.id)} className="text-red-500 hover:text-red-700 text-xs flex-shrink-0">Remove</button>
          </div>
        ))}
        <div className="flex flex-col sm:flex-row sm:space-x-2 space-y-2 sm:space-y-0 items-end">
          <input type="text" value={currentSymbol} onChange={e => setCurrentSymbol(e.target.value)} placeholder="Symbol (e.g. AAPL)" className="mt-1 block w-full sm:w-1/4 px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" />
          <input type="number" value={currentShares} onChange={e => setCurrentShares(e.target.value)} placeholder="Shares" className="mt-1 block w-full sm:w-1/4 px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" step="any" />
          <input type="number" value={currentPurchasePrice} onChange={e => setCurrentPurchasePrice(e.target.value)} placeholder="Purchase Price/Share" className="mt-1 block w-full sm:w-1/3 px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" step="0.01"/>
          <button type="button" onClick={handleAddStock} className="px-3 py-2 text-sm text-white bg-green-500 hover:bg-green-600 rounded-md w-full sm:w-auto">Add Stock</button>
        </div>
      </div>
      
      {/* --- CD Holdings --- */}
      <div className="space-y-3 p-3 border border-slate-200 rounded-md">
          <h4 className="text-md font-medium text-slate-700">CD Holdings</h4>
           {cdHoldings.map((cd) => (
              <div key={cd.id} className="flex items-center space-x-2 p-2 bg-slate-50 rounded">
                <span className="flex-1 text-sm">{formatCurrencyWhole(cd.principal)} @ {cd.interestRate}% until {cd.maturityDate}</span>
                <button type="button" onClick={() => handleRemoveCD(cd.id)} className="text-red-500 hover:text-red-700 text-xs">Remove</button>
              </div>
          ))}
          <div className="flex flex-col sm:flex-row sm:space-x-2 space-y-2 sm:space-y-0 items-end">
              <input type="number" value={currentPrincipal} onChange={e => setCurrentPrincipal(e.target.value)} placeholder="Principal" className="mt-1 block w-full sm:w-1/3 px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" step="0.01" />
              <input type="number" value={currentRate} onChange={e => setCurrentRate(e.target.value)} placeholder="Interest Rate (%)" className="mt-1 block w-full sm:w-1/4 px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" step="0.01" />
              <input type="date" value={currentMaturity} onChange={e => setCurrentMaturity(e.target.value)} placeholder="Maturity Date" className="mt-1 block w-full sm:w-1/3 px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" />
              <button type="button" onClick={handleAddCD} className="px-3 py-2 text-sm text-white bg-blue-500 hover:bg-blue-600 rounded-md w-full sm:w-auto">Add CD</button>
          </div>
      </div>

      <div className="flex justify-end space-x-3 pt-4">
        <button type="button" onClick={onCancel} className="px-4 py-2 text-sm font-medium text-slate-700 bg-slate-100 hover:bg-slate-200 border border-slate-300 rounded-md shadow-sm">Cancel</button>
        <button type="submit" className="px-4 py-2 text-sm font-medium text-white bg-primary hover:bg-primary-hover rounded-md shadow-sm">{initialData ? 'Save Changes' : 'Add Account'}</button>
      </div>
    </form>
  );
};

export default AccountForm;