import React, { useState, useEffect } from 'react';
import { Institution, InstitutionType } from '../types';

interface InstitutionFormProps {
  onSubmit: (institution: Institution) => void;
  onCancel: () => void;
  initialData?: Institution | null;
}

const InstitutionForm: React.FC<InstitutionFormProps> = ({ onSubmit, onCancel, initialData }) => {
  const [name, setName] = useState('');
  const [type, setType] = useState<InstitutionType>('financial');
  const [assetValue, setAssetValue] = useState<number>(0);
  const [liabilityValue, setLiabilityValue] = useState<number>(0);

  useEffect(() => {
    if (initialData) {
      setName(initialData.name);
      setType(initialData.type);
      setAssetValue(initialData.assetValue || 0);
      setLiabilityValue(initialData.liabilityValue || 0);
    } else {
      setName('');
      setType('financial');
      setAssetValue(0);
      setLiabilityValue(0);
    }
  }, [initialData]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!name.trim()) {
      alert('Name cannot be empty.');
      return;
    }
    const institutionData: Institution = {
      id: initialData?.id || '', // ID will be generated by App.tsx if new
      name: name.trim(),
      type: type,
      assetValue: type === 'real_estate' ? assetValue : undefined,
      liabilityValue: type === 'real_estate' ? liabilityValue : undefined,
    };
    onSubmit(institutionData);
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <div>
        <label className="block text-sm font-medium text-slate-700 mb-2">Type</label>
        <div className="flex space-x-4">
          <label className="flex items-center">
            <input type="radio" name="institutionType" value="financial" checked={type === 'financial'} onChange={() => setType('financial')} className="focus:ring-primary h-4 w-4 text-primary border-slate-300" />
            <span className="ml-2 text-sm text-slate-700">Financial Institution</span>
          </label>
          <label className="flex items-center">
            <input type="radio" name="institutionType" value="real_estate" checked={type === 'real_estate'} onChange={() => setType('real_estate')} className="focus:ring-primary h-4 w-4 text-primary border-slate-300" />
            <span className="ml-2 text-sm text-slate-700">Real Estate Asset</span>
          </label>
        </div>
      </div>
      <div>
        <label htmlFor="institutionName" className="block text-sm font-medium text-slate-700">
          {type === 'financial' ? 'Institution Name' : 'Asset Name'}
        </label>
        <input
          type="text"
          id="institutionName"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black"
          placeholder={type === 'financial' ? "e.g., Main Street Bank" : "e.g., 123 Main St"}
          required
        />
      </div>
      
      {type === 'real_estate' && (
        <div className="space-y-4 p-3 border border-slate-200 rounded-md">
           <h4 className="text-md font-medium text-slate-700 border-b pb-2">Asset Details</h4>
          <div>
            <label htmlFor="assetValue" className="block text-sm font-medium text-slate-700">Property Value</label>
            <input type="number" id="assetValue" value={assetValue} onChange={(e) => setAssetValue(parseFloat(e.target.value) || 0)} className="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" step="0.01" />
          </div>
           <div>
            <label htmlFor="liabilityValue" className="block text-sm font-medium text-slate-700">Mortgage Balance</label>
            <input type="number" id="liabilityValue" value={liabilityValue} onChange={(e) => setLiabilityValue(parseFloat(e.target.value) || 0)} className="mt-1 block w-full px-3 py-2 border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary sm:text-sm bg-white text-black" step="0.01" />
          </div>
        </div>
      )}

      <div className="flex justify-end space-x-3 pt-4">
        <button
          type="button"
          onClick={onCancel}
          className="px-4 py-2 text-sm font-medium text-slate-700 bg-slate-100 hover:bg-slate-200 border border-slate-300 rounded-md shadow-sm"
        >
          Cancel
        </button>
        <button
          type="submit"
          className="px-4 py-2 text-sm font-medium text-white bg-primary hover:bg-primary-hover rounded-md shadow-sm"
        >
          {initialData ? 'Save Changes' : `Add ${type === 'financial' ? 'Institution' : 'Asset'}`}
        </button>
      </div>
    </form>
  );
};

export default InstitutionForm;